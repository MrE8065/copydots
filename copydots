#!/usr/bin/env bash
# This script was generated by bashly 1.2.13 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
copydots_usage() {
  printf "copydots - Copy your dotfiles to a folder\n\n"

  printf "%s\n" "Usage:"
  printf "  copydots COMMAND\n"
  printf "  copydots [COMMAND] --help | -h\n"
  printf "  copydots --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Create the config file\n" "init"
  printf "  %s   Copy the files/folders in the config file to a folder (current directory if not specified)\n" "add "
  printf "  %s   Show all the entries in the config file\n" "show"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
copydots_init_usage() {
  printf "copydots init - Create the config file\n\n"

  printf "%s\n" "Usage:"
  printf "  copydots init\n"
  printf "  copydots init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
copydots_add_usage() {
  printf "copydots add - Copy the files/folders in the config file to a folder (current directory if not specified)\n\n"

  printf "%s\n" "Usage:"
  printf "  copydots add [OPTIONS]\n"
  printf "  copydots add --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--output, -o OUTPUT_PATH"
    printf "    The destination folder (current if not specified)\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
copydots_show_usage() {
  printf "copydots show - Show all the entries in the config file\n\n"

  printf "%s\n" "Usage:"
  printf "  copydots show\n"
  printf "  copydots show --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/yaml.sh
yaml_load() {
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
  local fs

  fs=$(echo @ | tr @ '\034')

  sed -ne "s|^\($s\):|\1|" \
    -e "s|^\($s\)\($w\)$s:${s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
    -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
        vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
        printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
    }'
}

# :command.command_functions
# :command.function
copydots_init_command() {

  # src/init_command.sh
  #!/usr/bin/env bash

  # Verify if the config file exists
  if [[ -f "$config_file" ]]; then
    echo "The config file '$config_file' already exists. Nothing was done."
    exit 1
  fi

  # Create example config file
  cat > "$config_file" <<EOL
my_folder:
  path: "/path/to/folder"
  desc: "A folder i want"

my_file:
  path: "/path/to/file"
  desc: "An important file"

my_file:
  path: "/path/to/file"
  desc: "An sepecial file"
  output: "/different/path"
EOL

  echo "The config file '$config_file' was created successfully"
}

# :command.function
copydots_add_command() {

  # src/add_command.sh
  #!/usr/bin/env bash

  # Verify if the config file exists
  if [[ ! -f "$config_file" ]]; then
    echo "The config file was not found: $config_file"
    echo "Execute 'copydots init' to create one"
    exit 1
  fi

  eval "$(yaml_load "$config_file")"

  # Get the default output folder (current directory by default)
  default_output_dir="${args[--output]:-$(pwd)}"

  # Check if the default output directory exists
  if [[ ! -d "$default_output_dir" ]]; then
    echo "The default output folder doesn't exist: $default_output_dir"
    exit 1
  fi

  for var in $(compgen -A variable | grep '_path$'); do
    key="${var%_path}"
    path="${!var}"

    # Check if there's a specific output for this entry
    output_var="${key}_output"
    if [[ -n "${!output_var}" ]]; then
      # Use specific output path
      output_dir="${!output_var}"

      # Expand tilde if present
      if [[ "$output_dir" =~ ^~(.*)$ ]]; then
        output_dir="$HOME${BASH_REMATCH[1]}"
      fi

      # Check if the custom output directory exists
      if [[ ! -d "$output_dir" ]]; then
        echo "Warning: '$output_dir' doesn't exist. Skipping '$key'..."
        continue
      fi
    else
      # Use default output directory
      output_dir="$default_output_dir"
    fi

    # Expand tilde in path if present
    if [[ "$path" =~ ^~(.*)$ ]]; then
      path="$HOME${BASH_REMATCH[1]}"
    fi

    if [[ ! -e "$path" ]]; then
      echo "Warning: '$path' doesn't exist. Skipping '$key'..."
      continue
    fi

    # Base name of the file or directory
    base_name="$(basename "$path")"
    dest_path="$output_dir/$base_name"

    # If destination exists, remove first and show "Updating". Otherwise, show "Adding"
    if [[ -e "$dest_path" ]]; then
        echo "Updating $key: '$dest_path'"
        rm -rf "$dest_path"
    else
      if [[ "$output_dir" != "$default_output_dir" ]]; then
        echo "Adding $key: $path → $output_dir (custom output)"
      else
        echo "Adding $key: $path → $output_dir"
      fi
    fi

    cp -r "$path" "$output_dir"
  done

  # Clean obsolete files/directories only from default output directory
  while IFS= read -r -d '' existing_item; do
    base_name="$(basename "$existing_item")"
    source_found=false
    source_path=""

    # Check if this item corresponds to any entry that uses default output
    for var in $(compgen -A variable | grep '_path$'); do
      key="${var%_path}"
      path="${!var}"
      output_var="${key}_output"

      # Only consider items that use default output directory
      if [[ -z "${!output_var}" ]]; then
        [[ "$path" =~ ^~(.*)$ ]] && path="$HOME${BASH_REMATCH[1]}"
        if [[ "$(basename "$path")" == "$base_name" ]]; then
          source_found=true
          source_path="$path"
          break
        fi
      fi
    done

    # Only remove if source was found but no longer exists in filesystem
    if $source_found && [[ ! -e "$source_path" ]]; then
      echo "Removing obsolete (source removed): $existing_item"
      rm -rf "$existing_item"
    fi
  done < <(find "$default_output_dir" -mindepth 1 -maxdepth 1 -print0)

  # Clean obsolete files from custom output directories
  declare -A output_to_files
  declare -A output_to_dirs

  # First pass: collect current outputs and their files
  for var in $(compgen -A variable | grep '_path$'); do
      key="${var%_path}"
      path="${!var}"
      output_var="${key}_output"

      if [[ -n "${!output_var}" ]]; then
          output_dir="${!output_var}"
          [[ "$output_dir" =~ ^~(.*)$ ]] && output_dir="$HOME${BASH_REMATCH[1]}"

          # Store both the file and its parent directory
          output_to_files["$output_dir/$(basename "$path")"]="$path"
          output_to_dirs["$output_dir"]=1
      fi
  done

  # Second pass: check each custom output file
  for output_path in "${!output_to_files[@]}"; do
      if [[ -e "$output_path" ]]; then
          source_path="${output_to_files[$output_path]}"
          [[ "$source_path" =~ ^~(.*)$ ]] && source_path="$HOME${BASH_REMATCH[1]}"

          # If source path no longer exists in filesystem, remove the output
          if [[ ! -e "$source_path" ]]; then
              echo "Removing obsolete (source removed): $output_path"
              rm -rf "$output_path"
          fi
      fi
  done
}

# :command.function
copydots_show_command() {

  # src/show_command.sh
  #!/usr/bin/env bash

  # Verify if the config file exists
  if [[ ! -f "$config_file" ]]; then
    echo "The config file was not found: $config_file"
    echo "Execute 'copydots init' to create one"
    exit 1
  fi

  cat "$config_file"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        copydots_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      copydots_init_parse_requirements "$@"
      shift $#
      ;;

    add)
      action="add"
      shift
      copydots_add_parse_requirements "$@"
      shift $#
      ;;

    show)
      action="show"
      shift
      copydots_show_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      copydots_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
copydots_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        copydots_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
copydots_add_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        copydots_add_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="add"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --output | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--output']="$2"
          shift
          shift
        else
          printf "%s\n" "--output requires an argument: --output, -o OUTPUT_PATH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
copydots_show_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        copydots_show_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="show"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  declare -g version="1.0.0"
  set -e

  # :command.variables
  # :variable.definition
  declare -g config_file="copydots-config.yml"

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "init") copydots_init_command ;;
    "add") copydots_add_command ;;
    "show") copydots_show_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
